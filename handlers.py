from math import floor
import os
from random import randint

from aiogram import Router, filters
from aiogram.types import Message
from dotenv import load_dotenv

from inlines import get_bot_invite_keyboard
import queries
from tools import generate_string_for_top
from utils import db_session

__all__ = []

load_dotenv()

router = Router()

db_session.global_init(
    user=os.getenv('DB_USER'),
    port=os.getenv('DB_PORT'),
    host=os.getenv('DB_HOST'),
    db_name=os.getenv('DB_NAME'),
    password=os.getenv('DB_PASSWORD'),
)


@router.message(filters.Command('start'))
async def start(message: Message):
    keyboard = get_bot_invite_keyboard()
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø Group War Bot\n\n–í —á–µ–º —Å–º—ã—Å–ª –±–æ—Ç–∞?\n'
        '–ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /army, '
        '–≥–¥–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
        '—Å–æ–ª–¥–∞—Ç –æ—Ç -10 –¥–æ 20 —Å–æ–ª–¥–∞—Ç.\n'
        '–¢–∞–∫–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /rade –∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –∏–≥—Ä–æ–∫–∞ '
        '—Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –ª—é–±–æ–≥–æ '
        '—É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ 10 –∏–ª–∏ –±–æ–ª—å—à–µ —Å–æ–ª–¥–∞—Ç. '
        '–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50/50 —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 10% –æ—Ç '
        '–µ–≥–æ –∞—Ä–º–∏–∏ –ª–∏–±–æ –ø–æ—Ç–µ—Ä—è—Ç—å 10% –æ—Ç —Å–≤–æ–µ–π.\n\n'
        '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –ø–∏—à–∏ /help',
        reply_markup=keyboard,
    )


@router.message(filters.Command('help'))
async def help(message: Message):
    await message.answer(
        '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n'
        '/army - –ø–æ–ª—É—á–∏—Ç—å/–ø–æ—Ç–µ—Ä—è—Ç—å –æ—Ç -10 –¥–æ 20 —Å–æ–ª–¥–∞—Ç\n'
        '/rade @username - –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã\n'
        '/top_army - —Ç–æ–ø 10 —Å–∞–º—ã—Ö –≤–µ–ª–∏–∫–∏—Ö –∞—Ä–º–∏–π –≤ –≥—Ä—É–ø–ø–µ\n'
        '/global_top - —Ç–æ–ø 10 —Å–∞–º—ã—Ö –≤–µ–ª–∏–∫–∏—Ö –∞—Ä–º–∏–π –≤ –º–∏—Ä–µ\n\n'
        '–ù–∞—à –∫–∞–Ω–∞–ª: t.me/group_war'
    )


@router.message(filters.Command('army'))
async def army(message: Message):
    if message.chat.type not in ('group', 'supergroup'):
        await message.answer(
            '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö',
            reply_markup=get_bot_invite_keyboard(),
        )
        return
    db_sess = db_session.create_session()
    queries.add_new_user_and_group_in_db(db_sess, message)
    queries.change_username(db_sess, message)
    user = queries.get_user_from_group(
        db_sess, message.chat.id, message.from_user.id
    )
    if user.increased_today:
        await message.answer(f'@{user.username}, –≤—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è!')
        return
    rnd_start = -10 if user.soldiers_count >= 10 else -user.soldiers_count
    delta_army = (
        randint(1, 20) if user.soldiers_count == 0 else randint(rnd_start, 20)
    )
    while delta_army == 0:
        delta_army = randint(-10, 20)
    user.soldiers_count += delta_army
    user.increased_today = True
    db_sess.commit()
    word = '—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å' if delta_army > 0 else '—É–º–µ–Ω—å—à–∏–ª–∞—Å—å'
    await message.answer(
        f'@{user.username}, –≤–∞—à–∞ –∞—Ä–º–∏—è {word} –Ω–∞ {abs(delta_army)} —Å–æ–ª–¥–∞—Ç–∞!\n'
        f'–í—Å–µ–≥–æ —É –≤–∞—Å {user.soldiers_count} —Å–æ–ª–¥–∞—Ç–∞.'
    )


@router.message(filters.Command('raid'))
async def raid(message: Message):
    if message.chat.type not in ('group', 'supergroup'):
        await message.answer(
            '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö',
            reply_markup=get_bot_invite_keyboard(),
        )
        return
    text = message.text.split()
    if len(text) == 1 or not text[1].startswith('@'):
        await message.answer(
            f'@{message.from_user.username}, –≤–∞–º –Ω—É–∂–Ω–æ '
            f'–æ—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã',
        )
        return
    username = text[1][1:]
    db_sess = db_session.create_session()
    queries.add_new_user_and_group_in_db(db_sess, message)
    queries.change_username(db_sess, message)
    attacking_user = queries.get_user_from_group(
        db_sess, message.chat.id, message.from_user.id
    )
    defending_user = queries.get_user_id_by_username(db_sess, username)
    defending_user = queries.get_user_from_group(
        db_sess, message.chat.id, defending_user
    )
    if attacking_user.raided_today:
        await message.answer(
            f'@{attacking_user.username}, –≤—ã —É–∂–µ –Ω–∞–ø–∞–¥–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è!',
        )
        return
    if attacking_user.telegram_id == defending_user.telegram_id:
        await message.answer(
            f'@{attacking_user.username}, –Ω–µ–ª—å–∑—è –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —Å–µ–±—è!',
        )
        return
    if attacking_user.soldiers_count < 10:
        await message.answer(
            f'@{attacking_user.username}, —É –≤–∞—Å –º–µ–Ω—å—à–µ 10 —Å–æ–ª–¥–∞—Ç!',
        )
        return
    if defending_user is None:
        await message.answer(
            f'@{attacking_user.username}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!',
        )
        return
    if defending_user.soldiers_count < 10:
        await message.answer(
            f'@{attacking_user.username}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ 10 —Å–æ–ª–¥–∞—Ç!',
        )
    result = randint(0, 1)
    if result:
        attacking_user.soldiers_count += floor(
            defending_user.soldiers_count / 10
        )
        await message.answer(
            f'@{attacking_user.username} –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–æ—è –≤—ã –ø–æ–ª—É—á–∏–ª–∏ '
            f'{int(floor(defending_user.soldiers_count / 10))} —Å–æ–ª–¥–∞—Ç.'
        )
        defending_user.soldiers_count -= floor(
            defending_user.soldiers_count / 10
        )
        attacking_user.wins += 1
        defending_user.defeats += 1
    else:
        defending_user.soldiers_count += floor(
            attacking_user.soldiers_count / 10
        )
        await message.answer(
            f'@{attacking_user.username} –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–æ—è –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ '
            f'{int(floor(attacking_user.soldiers_count / 10))} —Å–æ–ª–¥–∞—Ç.'
        )
        attacking_user.soldiers_count -= floor(
            attacking_user.soldiers_count / 10
        )
        attacking_user.defeats += 1
        defending_user.wins += 1
    attacking_user.raided_today = True
    db_sess.commit()


@router.message(filters.Command('top_army'))
async def top_army(message: Message):
    if message.chat.type not in ('group', 'supergroup'):
        await message.answer(
            '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö',
            reply_markup=get_bot_invite_keyboard(),
        )
        return
    db_sess = db_session.create_session()
    group = queries.get_group_by_telegram_id(db_sess, message.chat.id)
    users = sorted(
        group.users,
        key=lambda user: user.soldiers_count,
        reverse=True,
    )[:10]
    await message.answer(generate_string_for_top(users, is_global=False))


@router.message(filters.Command('global_top'))
async def global_top(message: Message):
    db_sess = db_session.create_session()
    users = queries.get_users_for_global_top(db_sess)
    await message.answer(generate_string_for_top(users, is_global=True))


@router.message(filters.Command('promo'))
async def promo(message: Message):
    if message.chat.type != 'private':
        await message.answer(
            f'üö´@{message.from_user.username}, '
            f'–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º'
        )
        return
    if len(message.text.split()) == 1:
        await message.answer('üö´–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥')
        return
    db_sess = db_session.create_session()
    promocode = message.text.split()[1]
    if not queries.is_promocode_exists_and_active(db_sess, promocode):
        await message.answer(
            f'–ü—Ä–æ–º–æ–∫–æ–¥–∞ {promocode} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.'
        )
        return
    if queries.is_user_used_promo(db_sess, message, promocode):
        await message.answer('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!')
        return
    promocode = queries.get_promocode_by_name(db_sess, promocode)
    users = queries.get_all_users_by_id(db_sess, message)
    if not users:
        await message.answer('–í–∞—Å –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ —Å –±–æ—Ç–æ–º!')
        return
    queries.add_user_to_promocode_list(db_sess, message, promocode)
    for user in users:
        user.soldiers_count += promocode.bonus_soldiers
    db_sess.commit()
    await message.answer(
        f'‚úÖ–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {promocode.bonus_soldiers} —Å–æ–ª–¥–∞—Ç'
    )
